akka {

  stdout-loglevel = "INFO"
  loglevel = "INFO"
  log-config-on-start = off

  actor {
    warn-about-java-serializer-usage = false
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
      event-stream = on
    }
    #serializers {
    #  jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    #}

    #serialization-bindings {
    #  "docs.serialization.JsonSerializable" = jackson-json
    #}
  }

  log-dead-letters = 0
  log-dead-letters-during-shutdown = off


  persistence {

    journal {

      # Path to the journal plugin to be used
      plugin = "j5ik2o.dynamo-db-journal"

      #plugin = "aws-dynamodb-journal"

      #aws-dynamodb-journal {
      #  journal-table =  "decomposition_events"
      #  journal-name =  "decomposition_journal"
      #  aws-access-key-id =  "XXXXXXXXXXXXxxx",
      #  aws-secret-access-key =  "YYYYYYYYYYY",
      #  endpoint =  "https://dynamodb.eu-west-2.amazonaws.com"
      #}
    }

    j5ik2o.dynamo-db-read-journal {
      class = "com.github.j5ik2o.akka.persistence.dynamodb.query.DynamoDBReadJournalProvider"
      write-plugin = "j5ik2o.dynamo-db-journal"
    }

    dynamo-db-client {
        access-key-id = ${AWS_KEY_DECO}
        secret-access-key = ${AWS_SECRET_DECO}
        # endpoint = ???
        region = ${AWS_REGION}
    }

    snapshot-store {

      # Path to the snapshot store plugin to be used
      plugin = "akka.persistence.snapshot-store.local"

      # Local filesystem snapshot store plugin.
      local {

        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"

        # Storage location of snapshot files.
        dir = "target/example/snapshots"
      }
    }
  }
}
